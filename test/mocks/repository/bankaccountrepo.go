// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adrianoccosta/exercise-qonto/internal/repository/bankaccountrepo (interfaces: BankAccountRepository)

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	reflect "reflect"

	bankaccountrepo "github.com/adrianoccosta/exercise-qonto/internal/repository/bankaccountrepo"
	gomock "github.com/golang/mock/gomock"
)

// MockBankAccountRepository is a mock of BankAccountRepository interface.
type MockBankAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBankAccountRepositoryMockRecorder
}

// MockBankAccountRepositoryMockRecorder is the mock recorder for MockBankAccountRepository.
type MockBankAccountRepositoryMockRecorder struct {
	mock *MockBankAccountRepository
}

// NewMockBankAccountRepository creates a new mock instance.
func NewMockBankAccountRepository(ctrl *gomock.Controller) *MockBankAccountRepository {
	mock := &MockBankAccountRepository{ctrl: ctrl}
	mock.recorder = &MockBankAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankAccountRepository) EXPECT() *MockBankAccountRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBankAccountRepository) Create(arg0 bankaccountrepo.BankAccount) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBankAccountRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBankAccountRepository)(nil).Create), arg0)
}

// DeleteByIban mocks base method.
func (m *MockBankAccountRepository) DeleteByIban(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIban", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByIban indicates an expected call of DeleteByIban.
func (mr *MockBankAccountRepositoryMockRecorder) DeleteByIban(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIban", reflect.TypeOf((*MockBankAccountRepository)(nil).DeleteByIban), arg0)
}

// Read mocks base method.
func (m *MockBankAccountRepository) Read(arg0 uint) (bankaccountrepo.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(bankaccountrepo.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBankAccountRepositoryMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBankAccountRepository)(nil).Read), arg0)
}

// ReadByIban mocks base method.
func (m *MockBankAccountRepository) ReadByIban(arg0 string) (bankaccountrepo.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByIban", arg0)
	ret0, _ := ret[0].(bankaccountrepo.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByIban indicates an expected call of ReadByIban.
func (mr *MockBankAccountRepositoryMockRecorder) ReadByIban(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByIban", reflect.TypeOf((*MockBankAccountRepository)(nil).ReadByIban), arg0)
}

// Update mocks base method.
func (m *MockBankAccountRepository) Update(arg0 bankaccountrepo.BankAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBankAccountRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBankAccountRepository)(nil).Update), arg0)
}
