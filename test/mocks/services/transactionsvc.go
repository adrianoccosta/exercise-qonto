// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adrianoccosta/exercise-qonto/internal/services/transactionsvc (interfaces: TransactionService)

// Package mockservice is a generated GoMock package.
package mockservice

import (
	reflect "reflect"

	domain "github.com/adrianoccosta/exercise-qonto/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactionService is a mock of TransactionService interface.
type MockTransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceMockRecorder
}

// MockTransactionServiceMockRecorder is the mock recorder for MockTransactionService.
type MockTransactionServiceMockRecorder struct {
	mock *MockTransactionService
}

// NewMockTransactionService creates a new mock instance.
func NewMockTransactionService(ctrl *gomock.Controller) *MockTransactionService {
	mock := &MockTransactionService{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionService) EXPECT() *MockTransactionServiceMockRecorder {
	return m.recorder
}

// ReadByFilter mocks base method.
func (m *MockTransactionService) ReadByFilter(arg0 map[string]string) (domain.TransactionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByFilter", arg0)
	ret0, _ := ret[0].(domain.TransactionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByFilter indicates an expected call of ReadByFilter.
func (mr *MockTransactionServiceMockRecorder) ReadByFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByFilter", reflect.TypeOf((*MockTransactionService)(nil).ReadByFilter), arg0)
}
